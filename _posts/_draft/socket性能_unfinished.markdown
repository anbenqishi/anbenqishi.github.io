1. 减小时延：这里主要谈到tcp nagle算法，它为了减少小包的发送，会把几个数据合起来一起发送，这样就造成有一定的延时。在允许，或者是场景经常有小包发送接收的情况，我们可以关掉这个算法选项。
2. 减少系统调用：每次读写都要经历用户层与内核间的切换，但是又是不能避免的操作。所以思路就是减少这种操作，读的时候，尽量可以一次性把数据都取出来，写的时候尽量一次性多写数据。
3. 根据BDP调节tcp窗口：BDP是带宽时延乘积，表征链路上可以承载的最大数据量。如果tcp窗口与BDP一致，就可以最大程度上提高吞吐量。tcp主要通过socket选项`SO_SNDBUF`与`SO_RCVBUF`来调整发送接收缓冲区。不过，这显然要根据特定情况由用户自己来调节，无法做到自动调节的目的（或者通过探测来获取RTT值，通过网卡来获取带宽达到每次创建socket自动调整的目的？）。
4. 调节Linux系统的tcp参数：这个其实不确定性太强了，而且往往你并不是确切知道你调整的实际效果，只能实验。而且调整系统参数，是对全局生效的，并不推荐。一般调整的参数有，发送/接收窗口大小（注意到程序里面调整的窗口大小是收到系统参数影响的，原则上是不超过系统参数值）等。







## 参考文献

[提高 Linux 上 socket 性能](https://www.ibm.com/developerworks/cn/linux/l-hisock.html)