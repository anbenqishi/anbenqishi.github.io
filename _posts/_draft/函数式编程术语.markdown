---
title: 函数式编程术语
---

## [原文]()



## e

0. 原文用rust语言给出的例子，我不是很熟；只在不好理解的情况下，我再贴代码（后续考虑贴Haskell代码或者Haskell的例子）。

1. arity:函数的参数个数。那不定参数呢？

2. Higher-Order Functions(HOF):高阶函数，它拿函数当作它的参数，或者它返回一个函数。

3. Closure:闭包，它是一个作用域，在其范围内当创建一个函数时，保持变量对函数有效（可用）。这个还是看下例子（给的这个例子不是说明partial application的吗，晕？）：

   ```rust
   let add_to = | x：i32 | { move | y : i32 | { x + y} };
   // 这里x=5在add_to_five闭包保持有效
   let add_to_five = add_to(5);
   //这里给y赋值3，由于闭包内的参数有效，所以可以计算x+y了
   add_to_five(3); // => 8
   ```

   很有用有没有，可以组装参数。提到的一个应用是在事件handlers中，在实际被call时，还可以访问到上层（parents）的参数。

4. Partial Application:有一个原始函数，我们再创建了一个新的函数，这个函数是在原始函数的基础上给部分其参数赋值生成的。这种行为我们称之为partially apply，即部分应用（感觉跟closure讲重了）。

5. Currying:

6. Auto Currying:

7. Referential Transparency:

8. Lambda:

9. Lambda Calculus:

10. Purity:

11. Side effects:

12. Idempotent:

13. Function Composition:

14. Point-Free Style:

15. Predicate:

16. Contracts:

17. Category:

18. Value:

19. Constant:

20. Variance:

21. Higher Kinded Type:

22. Functor:

23. Pointed Functor:

24. Lifting:

25. Equational Reasoning:

26. Monoid:

27. Monad:

28. Comonad:

29. Applicative:

30. Morphism:

31. Endomorphism:

32. Isomorphism:

33. Homomorphism:

34. Catamorphism:

35. Hylomorphism:

36. Anamorphism:

37. Setoid:

38. Semigroup:

39. Foldable:

40. Lens:

41. Type Signature:

42. Algebraic data type:

43. Sum Type:

44. Product Type:

45. Option:

46. 



